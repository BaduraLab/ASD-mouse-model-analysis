%% README %%
%======================== Script: Making Graphs of One Genotype norm. to another ========================%

% This code displays data relating to one dataset, normalised to another
% dataset (e.g. behaviour of Shank mice, norm. to wild type mice). This
% code will display each behaviour of the "test" genotype/group on an
% animal per animal basis as black dots in the foreground, and in the background will be the "control"
% std/sem (whichever is specified) in the background as a grey shaded
% region. See [The impact of C-Tactile Low threshold mechanoreceptors on affective touch and social interactions in mice]
% for an example of this.

% Here the code is configured to make graphs of the Total Frames spent in 
% each behaviour. By modifying the code in Section 3, one can also 
% plot "Average Event Duration" or "Number of Events". For more info, 
% check the documentation of the "ComputeGroupData.m" function

% Instructions:
% 1. In Section 1, define the type of experimental day being analysed (and
%    this will ensure that the correct set of behaviours are computed)
% 2. Place all .mat files into a single directory. Specify that directory
%    in section two of the code. This will load all of these files into
%    the workspace.
% 3. Ensure that the rest of the variables in the code are named
%    appropriately (according to what data you would like to plot). Pay
%    particular attention to Sections 3 (which parameters to plot) and 6
%    (plotting SEM vs STD)
% 4. Run
clc
clear

%% Section 1: Choose Experimental Day Type
%This function pulls the correct behavious depending on the experimental
%day being tested and the type of behaviours being examined.

% IF you want all the behaviours relating to one experimental day set the
% text in brackets to 'Std1'/'std2'/'Wheel'/'Object'/'Mouse'.

% For information on particular behavioural sets that can be graphed,
% please check the "BehaviourSet" script which gives descriptions of
% possibilities.
Behaviours = BehaviourSet('Std1'); % Set text in brackets 

%% Section 2: Load files into MATLAB:
filenames = dir('/mnt/Data1/Arun/LMT/LMT_data/LMT processing/Data/Genotype_compiled/*.mat');

for i=1:length(filenames)
    file = strcat(filenames(i).folder,"/", filenames(i).name)
    load(file);
end

%% Section 3: Compute MeanEventDuration/ #Frames/ #Events for each of our groups
% This piece of code takes the genotpe specific data and computes parameters
% relating to these as follows:
%       XXX_TotalFrames = total frames spent in each behaviour/ genotype (i.e. mean)
%       XXX_TotalFrames_Each = total frames spent in each behaviour/ animal
% Note: the function ComputeGroupData can compute other parameters, see
% function info for details. If you wish to display MeanDuration,
% TotalEvents then change the variables below, but see ComputeData for more
% information on this, and simply use Cntrl+F to "Find and Replace" all
% "TotalFrames" with the variable you will use

%%%Test animals (e.g. Shank2_KO_SH (standard housed))

%SHANK2_KOs_SH
[~, ~, S2_KOs_std1_SH_TotalFrames, S2_KOs_std1_SH_TotalFrames_Each, ~]        = ComputeGroupData(S2_std1, Behaviours);


%%%Control animals (e.g. WT_SH (wild type standard housed))

%WTs_SH
[~, ~, WT_std1_SH_TotalFrames, WT_std1_SH_TotalFrames_Each, ~]                = ComputeGroupData(WT_std1,    Behaviours);


%% Section 4: Normalize our data
% This code normalises the test data, as a fold change of the control
% animal data (e.g. Shank2 mice spend 1.3x more time in behaviour X,
% relative to wild type animals)


norm_S2_KOs_std1_SH_TotalFrames = S2_KOs_std1_SH_TotalFrames./WT_std1_SH_TotalFrames;
norm_S2_KOs_std1_SH_TotalFrames_Each = S2_KOs_std1_SH_TotalFrames_Each./WT_std1_SH_TotalFrames;

norm_WT_std1_SH_TotalFrames = WT_std1_SH_TotalFrames./WT_std1_SH_TotalFrames;
norm_WT_std1_SH_TotalFrames_Each = WT_std1_SH_TotalFrames_Each./ WT_std1_SH_TotalFrames;

%% Section 5: Calculate STD/SEM of data

% Test animals (to be displayed as error bars on the graph)
norm_S2_KOs_std1_SH_TotalFrames_std = std(norm_S2_KOs_std1_SH_TotalFrames_Each,1);
norm_S2_KOs_std1_SH_TotalFrames_sem = std(norm_S2_KOs_std1_SH_TotalFrames_Each,1)/sqrt(length(norm_S2_KOs_std1_SH_TotalFrames_Each));

% Control animals (to be displayed as a shaded grey region behind the bars)
norm_WT_std1_SH_TotalFrames_std = std(norm_WT_std1_SH_TotalFrames_Each,1);
norm_WT_std1_SH_TotalFrames_sem = std(norm_WT_std1_SH_TotalFrames_Each,1)/sqrt(length(norm_WT_std1_SH_TotalFrames_Each));


%%% this piece of code just sets up the grey region:
greyRegion_Data_std = [norm_WT_std1_SH_TotalFrames; (norm_WT_std1_SH_TotalFrames+norm_WT_std1_SH_TotalFrames_std); (norm_WT_std1_SH_TotalFrames-norm_WT_std1_SH_TotalFrames_std)];
    % first column is the norm. mean (so all 1's), then the second and
    % third column is the mean +/- the std, the region between these values
    % will be shaded in grey.
    
greyRegion_Data_sem = [norm_WT_std1_SH_TotalFrames; (norm_WT_std1_SH_TotalFrames+norm_WT_std1_SH_TotalFrames_sem); (norm_WT_std1_SH_TotalFrames-norm_WT_std1_SH_TotalFrames_sem)];
    % same as above, except for SEM



%% Section 6: Graph the data

% Before running this section, you must decide whether you wish to plot
    % 1. The SEM or STD of the 'control data' (to be displayed as a grey
    %    shaded region
    % 2. The SEM or STD of the 'test data' (to be displayed as error bars
    %    atop the coloured bars)
    
    
% Change the following variables according:
 greyRegion = greyRegion_Data_std;
 errorBar_testData = norm_S2_KOs_std1_SH_TotalFrames_std;

    
% General Graph parameters
Legend = {'Shank2 KO EE (n=3)'}; % Legend
YLabel = ('% rel. to Shank2 WT SH'); % Y axis label
Title  = ('Normalised total frames spent in each behaviour (per genotype)'); % Title


h = figure;
x = 1:numel(Behaviours);
 

% Plot mean of control animals as straight black line
plot(x, greyRegion(1, :), 'k-');
hold on;

% Plot grey shaded region
upper_line= repelem(greyRegion(2,:), 1);
lower_line = repelem(greyRegion(3,:), 1);

plot(x, upper_line, 'LineWidth', 0.5, 'Color', 'white'); %plot line that should be upper interval line
hold on;
plot(x, lower_line, 'LineWidth', 0.5 , 'Color', 'white'); %plot line that should be lower interval line
x2 = [x, fliplr(x)];
inBetween = [upper_line, fliplr(lower_line)];
f= fill(x2, inBetween, 'k');
set(f,'facealpha',.1)
set(f,'edgecolor','white');
set(gca,'TickDir','out');
hold on;

% Plot individual points, corresponding to mean of 'test' data, with error bars

er = errorbar(norm_S2_KOs_std1_SH_TotalFrames, errorBar_testData, 'k.', 'Marker', 'none')    %% Change here to display STD/SEM!!!
hold on;

%%Scatter plot:
for i = 1:size(norm_S2_KOs_std1_SH_TotalFrames_Each,1)
    s(1) = scatter(x, norm_S2_KOs_std1_SH_TotalFrames_Each(i,:), 50, 'ko')
    hold on
end

% Gen graph plotting
set(gca,'XTick',1:numel(Behaviours),'XTickLabel',Behaviours);
ax = gca;
ax.XColor = 'k'
ax.YColor = 'k'
set(gca, 'FontName', 'Tahoma')
xtickangle(35);
title(Title);
ylabel (YLabel)


